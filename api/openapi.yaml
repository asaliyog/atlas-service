openapi: 3.0.3
info:
  title: Golang Service API
  description: RESTful API service with Azure Entra ID authentication
  version: 1.0.0
  contact:
    name: API Support
    email: support@yourcompany.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://your-domain.com
    description: Production server

security:
  - BearerAuth: []

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check endpoint
      description: Get the health status of the service
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /api/v1/users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a list of all users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Users
      summary: Create a new user
      description: Create a new user with the provided information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a single user by their ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
          description: User ID
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Users
      summary: Update user
      description: Update an existing user's information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a user by their ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
          description: User ID
      responses:
        '204':
          description: User deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Azure Entra ID JWT token

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: User ID
        email:
          type: string
          format: email
          description: User email address
        name:
          type: string
          description: User full name
        azure_id:
          type: string
          description: Azure Entra ID identifier
        is_active:
          type: boolean
          description: Whether the user is active
        created_at:
          type: string
          format: date-time
          description: User creation timestamp
        updated_at:
          type: string
          format: date-time
          description: User last update timestamp
      required:
        - id
        - email
        - name
        - is_active
        - created_at
        - updated_at

    CreateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email address
        name:
          type: string
          description: User full name
        azure_id:
          type: string
          description: Azure Entra ID identifier
      required:
        - email
        - name

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email address
        name:
          type: string
          description: User full name
        is_active:
          type: boolean
          description: Whether the user is active

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          description: Health status
          example: healthy
        timestamp:
          type: string
          format: date-time
          description: Current timestamp
        version:
          type: string
          description: Service version
          example: 1.0.0
        uptime:
          type: string
          description: Service uptime
          example: 1h23m45s
      required:
        - status
        - timestamp
        - version
        - uptime

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'