openapi: 3.0.0
info:
  title: Atlas Service API
  description: |
    A comprehensive API for managing virtual machines across multiple cloud providers (AWS, Azure, GCP).
    
    ## Configurable Filtering System
    
    The API uses a configurable filtering system with the format: `field_operator=value`
    
    ### Supported Field Types and Operators
    
    #### String Fields (name, cloudType, status, location, instanceType, cloudAccountId)
    - `eq` - Equals (case-insensitive)
    - `ne` - Not equals (case-insensitive)
    - `contains` - Contains substring (case-insensitive)
    - `starts_with` - Starts with substring (case-insensitive)
    - `ends_with` - Ends with substring (case-insensitive)
    - `like` - Pattern matching with % wildcard
    - `ilike` - Case-insensitive pattern matching
    - `in` - Value is in comma-separated list
    - `not_in` - Value is not in comma-separated list
    - `is_null` - Field is null/empty
    - `is_not_null` - Field is not null/empty
    
    #### Date Fields (createdAt, updatedAt)
    - `eq` - Equals
    - `ne` - Not equals
    - `gt` - Greater than
    - `gte` - Greater than or equal
    - `lt` - Less than
    - `lte` - Less than or equal
    - `between` - Value is between two values (comma-separated)
    - `is_null` - Field is null/empty
    - `is_not_null` - Field is not null/empty
    
    ### Filtering Examples
    - `status_eq=running` - Only running VMs
    - `name_contains=server` - VMs with "server" in the name
    - `cloudType_in=aws,azure` - VMs from AWS or Azure
    - `createdAt_gte=2024-01-01` - VMs created after Jan 1, 2024
    - `name_starts_with=web` - VMs with names starting with "web"
    - `status_is_not_null` - VMs with non-null status
    - `createdAt_between=2024-01-01,2024-12-31` - VMs created in 2024
    
    ### Multiple Filters
    Multiple filters use AND logic:
    - `status_eq=running&cloudType_eq=aws&name_contains=web`
    
    ### Error Handling
    Invalid filters return 400 Bad Request with descriptive error messages:
    - Invalid field: "field 'invalidField' is not allowed for filtering"
    - Invalid operator: "operator 'gte' is not allowed for field 'status' of type 'string'"
    - Invalid value: "value 'invalid-date' is not a valid date for field 'createdAt'"
  version: 1.0.0
  contact:
    name: API Support
    email: support@atlas-service.com
servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.atlas-service.com
    description: Production server
paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the health status of the service
      tags:
        - health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-07-07T17:30:00Z"
  /api/v1/vms:
    get:
      summary: Retrieve a list of virtual machines
      description: |
        Fetches a paginated list of virtual machines across AWS EC2, GCP Compute, and Azure VMs.
        
        ## Filtering Examples (New Configurable System)
        - `status_eq=running` - Only running VMs
        - `cloudType_eq=aws` - Only AWS VMs
        - `name_contains=server` - VMs with "server" in the name
        - `instanceType_in=t2.micro,t2.small` - VMs with specific instance types
        - `createdAt_gte=2024-01-01` - VMs created after Jan 1, 2024
        - `name_starts_with=web` - VMs with names starting with "web"
        - `status_eq=running&cloudType_eq=aws` - Running AWS VMs only
        - `createdAt_between=2024-01-01,2024-12-31` - VMs created in 2024
        
        ## Sorting Examples
        - `sortBy=name&sortOrder=asc` - Sort by name ascending
        - `sortBy=createdAt&sortOrder=desc` - Sort by creation date descending
        
        ## Pagination Examples
        - `page=1&pageSize=20` - First page with 20 items
        - `page=2&pageSize=10` - Second page with 10 items
        
        ## Environment Resolution
        When enabled via configuration, each VM response includes an `environment` field with resolved environment information based on account, region, and VPC criteria matching.
      tags:
        - vms
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination (1-based)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          description: Number of VMs per page (max 1000)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 20
        - name: sortBy
          in: query
          description: |
            Field to sort by. Can be any field from the VM response.
            Examples: `name`, `createdAt`, `status`, `cloudType`, `location`
          required: false
          schema:
            type: string
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort order (asc or desc)
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        # Configurable Filter Parameters
        # Format: field_operator=value
        # Examples: status_eq=running, name_contains=server, createdAt_gte=2024-01-01
        
        # String field filters (name, cloudType, status, location, instanceType, cloudAccountId)
        - name: name_eq
          in: query
          description: Filter by VM name (equals, case-insensitive)
          required: false
          schema:
            type: string
        - name: name_ne
          in: query
          description: Filter by VM name (not equals, case-insensitive)
          required: false
          schema:
            type: string
        - name: name_contains
          in: query
          description: Filter by VM name (contains substring, case-insensitive)
          required: false
          schema:
            type: string
        - name: name_starts_with
          in: query
          description: Filter by VM name (starts with, case-insensitive)
          required: false
          schema:
            type: string
        - name: name_ends_with
          in: query
          description: Filter by VM name (ends with, case-insensitive)
          required: false
          schema:
            type: string
        - name: name_like
          in: query
          description: Filter by VM name (pattern matching with % wildcard)
          required: false
          schema:
            type: string
        - name: name_ilike
          in: query
          description: Filter by VM name (case-insensitive pattern matching)
          required: false
          schema:
            type: string
        - name: name_in
          in: query
          description: Filter by VM name (in comma-separated list)
          required: false
          schema:
            type: string
            example: "server1,server2,web-server"
        - name: name_not_in
          in: query
          description: Filter by VM name (not in comma-separated list)
          required: false
          schema:
            type: string
            example: "server1,server2"
        - name: name_is_null
          in: query
          description: Filter for VMs with null/empty name
          required: false
          schema:
            type: boolean
        - name: name_is_not_null
          in: query
          description: Filter for VMs with non-null name
          required: false
          schema:
            type: boolean
            
        - name: cloudType_eq
          in: query
          description: Filter by cloud provider (equals)
          required: false
          schema:
            type: string
            enum: [aws, azure, gcp]
        - name: cloudType_ne
          in: query
          description: Filter by cloud provider (not equals)
          required: false
          schema:
            type: string
            enum: [aws, azure, gcp]
        - name: cloudType_in
          in: query
          description: Filter by multiple cloud providers (comma-separated)
          required: false
          schema:
            type: string
            example: "aws,azure"
        - name: cloudType_not_in
          in: query
          description: Filter by cloud providers not in list (comma-separated)
          required: false
          schema:
            type: string
            example: "gcp"
            
        - name: status_eq
          in: query
          description: Filter by VM status (equals, case-insensitive)
          required: false
          schema:
            type: string
        - name: status_ne
          in: query
          description: Filter by VM status (not equals, case-insensitive)
          required: false
          schema:
            type: string
        - name: status_contains
          in: query
          description: Filter by VM status (contains substring, case-insensitive)
          required: false
          schema:
            type: string
        - name: status_in
          in: query
          description: Filter by multiple statuses (comma-separated)
          required: false
          schema:
            type: string
            example: "running,stopped"
        - name: status_not_in
          in: query
          description: Filter by statuses not in list (comma-separated)
          required: false
          schema:
            type: string
            example: "terminated"
        - name: status_is_null
          in: query
          description: Filter for VMs with null/empty status
          required: false
          schema:
            type: boolean
        - name: status_is_not_null
          in: query
          description: Filter for VMs with non-null status
          required: false
          schema:
            type: boolean
            
        - name: location_eq
          in: query
          description: Filter by location/region (equals, case-insensitive)
          required: false
          schema:
            type: string
        - name: location_ne
          in: query
          description: Filter by location/region (not equals, case-insensitive)
          required: false
          schema:
            type: string
        - name: location_contains
          in: query
          description: Filter by location/region (contains substring, case-insensitive)
          required: false
          schema:
            type: string
        - name: location_in
          in: query
          description: Filter by multiple locations (comma-separated)
          required: false
          schema:
            type: string
            example: "us-east-1,us-west-2"
        - name: location_not_in
          in: query
          description: Filter by locations not in list (comma-separated)
          required: false
          schema:
            type: string
            example: "eu-west-1"
            
        - name: instanceType_eq
          in: query
          description: Filter by instance type (equals, case-insensitive)
          required: false
          schema:
            type: string
        - name: instanceType_ne
          in: query
          description: Filter by instance type (not equals, case-insensitive)
          required: false
          schema:
            type: string
        - name: instanceType_contains
          in: query
          description: Filter by instance type (contains substring, case-insensitive)
          required: false
          schema:
            type: string
        - name: instanceType_in
          in: query
          description: Filter by multiple instance types (comma-separated)
          required: false
          schema:
            type: string
            example: "t2.micro,t2.small"
        - name: instanceType_not_in
          in: query
          description: Filter by instance types not in list (comma-separated)
          required: false
          schema:
            type: string
            example: "t3.micro"
            
        - name: cloudAccountId_eq
          in: query
          description: Filter by cloud account ID (equals, case-insensitive)
          required: false
          schema:
            type: string
        - name: cloudAccountId_ne
          in: query
          description: Filter by cloud account ID (not equals, case-insensitive)
          required: false
          schema:
            type: string
        - name: cloudAccountId_contains
          in: query
          description: Filter by cloud account ID (contains substring, case-insensitive)
          required: false
          schema:
            type: string
        - name: cloudAccountId_in
          in: query
          description: Filter by multiple cloud account IDs (comma-separated)
          required: false
          schema:
            type: string
            example: "123456789012,987654321098"
        - name: cloudAccountId_not_in
          in: query
          description: Filter by cloud account IDs not in list (comma-separated)
          required: false
          schema:
            type: string
            example: "111111111111"
            
        # Date field filters (createdAt, updatedAt)
        - name: createdAt_eq
          in: query
          description: Filter by creation date (equals)
          required: false
          schema:
            type: string
            format: date-time
            example: "2024-01-01T00:00:00Z"
        - name: createdAt_ne
          in: query
          description: Filter by creation date (not equals)
          required: false
          schema:
            type: string
            format: date-time
            example: "2024-01-01T00:00:00Z"
        - name: createdAt_gt
          in: query
          description: Filter by creation date (greater than)
          required: false
          schema:
            type: string
            format: date-time
            example: "2024-01-01T00:00:00Z"
        - name: createdAt_gte
          in: query
          description: Filter by creation date (greater than or equal)
          required: false
          schema:
            type: string
            format: date-time
            example: "2024-01-01T00:00:00Z"
        - name: createdAt_lt
          in: query
          description: Filter by creation date (less than)
          required: false
          schema:
            type: string
            format: date-time
            example: "2024-12-31T23:59:59Z"
        - name: createdAt_lte
          in: query
          description: Filter by creation date (less than or equal)
          required: false
          schema:
            type: string
            format: date-time
            example: "2024-12-31T23:59:59Z"
        - name: createdAt_between
          in: query
          description: Filter by creation date (between two values, comma-separated)
          required: false
          schema:
            type: string
            example: "2024-01-01T00:00:00Z,2024-12-31T23:59:59Z"
        - name: createdAt_is_null
          in: query
          description: Filter for VMs with null creation date
          required: false
          schema:
            type: boolean
        - name: createdAt_is_not_null
          in: query
          description: Filter for VMs with non-null creation date
          required: false
          schema:
            type: boolean
            
        # Environment filtering
        - name: env
          in: query
          description: Filter VMs by environment ID (e.g., prod0, staging, dev)
          required: false
          schema:
            type: string
            example: "prod0"
      responses:
        '200':
          description: Successful response with a list of VMs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VMListResponse'
              examples:
                all_vms:
                  summary: All VMs
                  value:
                    data:
                      - id: "i-1234567890abcdef0"
                        name: "web-server-01"
                        cloudType: "aws"
                        status: "running"
                        createdAt: "2025-07-07T16:54:43Z"
                        cloudAccountId: "123456789012"
                        location: "us-east-1a"
                        instanceType: "t2.micro"
                    pagination:
                      page: 1
                      pageSize: 20
                      totalItems: 30
                      totalPages: 2
                aws_vms:
                  summary: AWS VMs only
                  description: Example with cloudType_eq=aws filter
                  value:
                    data:
                      - id: "i-1234567890abcdef0"
                        name: "web-server-01"
                        cloudType: "aws"
                        status: "running"
                        createdAt: "2025-07-07T16:54:43Z"
                        cloudAccountId: "123456789012"
                        location: "us-east-1a"
                        instanceType: "t2.micro"
                    pagination:
                      page: 1
                      pageSize: 20
                      totalItems: 10
                      totalPages: 1
                filtered_vms:
                  summary: Filtered VMs
                  description: Example with multiple filters (status_eq=running&name_contains=server)
                  value:
                    data:
                      - id: "i-1234567890abcdef0"
                        name: "web-server-01"
                        cloudType: "aws"
                        status: "running"
                        createdAt: "2025-07-07T16:54:43Z"
                        cloudAccountId: "123456789012"
                        location: "us-east-1a"
                        instanceType: "t2.micro"
                      - id: "i-0987654321fedcba0"
                        name: "db-server-02"
                        cloudType: "azure"
                        status: "running"
                        createdAt: "2025-07-07T15:30:00Z"
                        cloudAccountId: "987654321098"
                        location: "eastus"
                        instanceType: "Standard_D2s_v3"
                    pagination:
                      page: 1
                      pageSize: 20
                      totalItems: 2
                      totalPages: 1
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /api/v1/environments:
    get:
      summary: Retrieve a list of environments
      description: |
        Fetches a paginated list of configured environments with their criteria and metadata.
        
        ## Filtering Examples
        - `tag=production` - Only production environments
        - `account=123456789012` - Environments in specific account
        - `region=us-east-2` - Environments in specific region
        - `name=prod` - Environments with "prod" in the name
        
        ## Sorting Examples
        - `sortBy=name&sortOrder=asc` - Sort by name ascending
        - `sortBy=id&sortOrder=desc` - Sort by ID descending
        
        ## Pagination Examples
        - `page=1&pageSize=10` - First page with 10 items
        - `page=2&pageSize=5` - Second page with 5 items
      tags:
        - environments
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination (1-based)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          description: Number of environments per page (max 1000)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 20
        - name: sortBy
          in: query
          description: Field to sort by (id, name, description)
          required: false
          schema:
            type: string
            default: id
        - name: sortOrder
          in: query
          description: Sort order (asc or desc)
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: tag
          in: query
          description: Filter by tag (can be specified multiple times)
          required: false
          schema:
            type: string
        - name: account
          in: query
          description: Filter by account ID
          required: false
          schema:
            type: string
        - name: region
          in: query
          description: Filter by region
          required: false
          schema:
            type: string
        - name: vpc
          in: query
          description: Filter by VPC ID
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: Filter by name (contains)
          required: false
          schema:
            type: string
        - name: description
          in: query
          description: Filter by description (contains)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response with a list of environments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentListResponse'
              examples:
                all_environments:
                  summary: All environments
                  value:
                    data:
                      - id: "prod0"
                        name: "Production Primary"
                        description: "Primary production environment in us-east-2"
                        criteria:
                          account: "123456789012"
                          region: "us-east-2"
                          vpc: "vpc-12345678"
                        tags:
                          - "production"
                          - "primary"
                          - "critical"
                        metadata:
                          owner: "platform-team"
                          cost_center: "CC-001"
                          compliance: "SOC2"
                        createdAt: "2025-07-07T16:54:43Z"
                        updatedAt: "2025-07-07T16:54:43Z"
                    pagination:
                      page: 1
                      pageSize: 20
                      totalItems: 6
                      totalPages: 1
                    _links:
                      self: "http://localhost:8080/api/v1/environments"
                      vms: "http://localhost:8080/api/v1/vms"
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /api/v1/environments/{id}:
    get:
      summary: Retrieve a specific environment
      description: Fetches details of a specific environment by ID
      tags:
        - environments
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Environment ID
          required: true
          schema:
            type: string
            example: "prod0"
      responses:
        '200':
          description: Successful response with environment details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Environment'
                  _links:
                    $ref: '#/components/schemas/HATEOASLinks'
        '404':
          description: Environment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /api/v1/environments/reload:
    post:
      summary: Reload environment configuration
      description: Reloads the environment configuration from the YAML file
      tags:
        - environments
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Configuration reloaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Configuration reloaded successfully"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-07-07T16:54:43Z"
        '400':
          description: Invalid configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /api/v1/environments/config/info:
    get:
      summary: Get configuration information
      description: Returns information about the loaded environment configuration
      tags:
        - environments
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Configuration information
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalEnvironments:
                    type: integer
                    example: 6
                  configPath:
                    type: string
                    example: "config/environments.yaml"
                  lastLoaded:
                    type: string
                    format: date-time
                    example: "2025-07-07T16:54:43Z"
                  accounts:
                    type: object
                    additionalProperties:
                      type: integer
                    example:
                      "123456789012": 2
                      "987654321098": 2
                      "555555555555": 2
                  regions:
                    type: object
                    additionalProperties:
                      type: integer
                    example:
                      "us-east-2": 1
                      "us-west-2": 1
                      "us-east-1": 1
                      "us-west-1": 1
                      "eu-west-1": 2
                  tags:
                    type: object
                    additionalProperties:
                      type: integer
                    example:
                      "production": 2
                      "staging": 1
                      "development": 1
                      "testing": 2
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    VMListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/VM'
        pagination:
          $ref: '#/components/schemas/Pagination'
      required: [data, pagination]
    VM:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the VM (cloud provider-specific ID).
          example: i-1234567890abcdef0
        name:
          type: string
          description: Name of the VM.
          example: web-server-01
        cloudType:
          type: string
          enum: [aws, gcp, azure]
          description: The cloud provider hosting the VM.
          example: aws
        status:
          type: string
          description: Current status of the VM (e.g., running, stopped).
          example: running
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the VM was created.
          example: 2025-07-03T16:16:00Z
        cloudAccountId:
          type: string
          description: The account ID (AWS), project ID (GCP), or subscription ID (Azure).
          example: 123456789012
        location:
          type: string
          description: The region (AWS, Azure) or zone (GCP) where the VM is deployed.
          example: us-east-1
        instanceType:
          type: string
          description: The instance type or size (e.g., t2.micro, e2-standard-2, Standard_D2s_v3).
          example: t2.micro
        cloudSpecificDetails:
          oneOf:
            - $ref: '#/components/schemas/AWSDetails'
            - $ref: '#/components/schemas/GCPDetails'
            - $ref: '#/components/schemas/AzureDetails'
          discriminator:
            propertyName: cloudType
            mapping:
              aws: '#/components/schemas/AWSDetails'
              gcp: '#/components/schemas/GCPDetails'
              azure: '#/components/schemas/AzureDetails'
        environment:
          $ref: '#/components/schemas/EnvironmentInfo'
          description: Resolved environment information (only included when environment resolution is enabled)
      required: [id, cloudType, status, createdAt, cloudAccountId, location, instanceType]
    AWSDetails:
      type: object
      properties:
        cloudType:
          type: string
          enum: [aws]
          example: aws
        vpcId:
          type: string
          description: ID of the VPC the VM is in.
          example: vpc-12345678
        subnetId:
          type: string
          description: ID of the subnet the VM is in.
          example: subnet-12345678
        securityGroupIds:
          type: array
          items:
            type: string
          description: List of security group IDs associated with the VM.
          example: [sg-12345678, sg-98765432]
        privateIpAddress:
          type: string
          description: Private IP address of the VM.
          example: 10.0.1.100
        publicIpAddress:
          type: string
          description: Public IP address of the VM, if assigned.
          example: 54.123.45.67
      required: [cloudType, vpcId, subnetId]
    GCPDetails:
      type: object
      properties:
        cloudType:
          type: string
          enum: [gcp]
          example: gcp
        machineType:
          type: string
          description: GCP-specific machine type.
          example: e2-standard-2
        network:
          type: string
          description: Name of the network the VM is in.
          example: default
        region:
          type: string
          description: The region containing the zone (e.g., us-central1).
          example: us-central1
        privateIpAddress:
          type: string
          description: Private IP address of the VM.
          example: 10.128.0.2
        publicIpAddress:
          type: string
          description: Public IP address of the VM, if assigned.
          example: 34.123.45.67
      required: [cloudType, machineType]
    AzureDetails:
      type: object
      properties:
        cloudType:
          type: string
          enum: [azure]
          example: azure
        resourceGroup:
          type: string
          description: Azure resource group containing the VM.
          example: my-resource-group
        vmSize:
          type: string
          description: Azure-specific VM size.
          example: Standard_D2s_v3
        privateIpAddress:
          type: string
          description: Private IP address of the VM.
          example: 10.0.0.4
        publicIpAddress:
          type: string
          description: Public IP address of the VM, if assigned.
          example: 52.123.45.67
      required: [cloudType, resourceGroup, vmSize]
    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: Current page number.
          example: 1
        pageSize:
          type: integer
          description: Number of items per page.
          example: 20
        totalItems:
          type: integer
          description: Total number of VMs matching the query.
          example: 100
        totalPages:
          type: integer
          description: Total number of pages.
          example: 5
      required: [page, pageSize, totalItems, totalPages]
    Environment:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the environment
          example: "prod0"
        name:
          type: string
          description: Display name of the environment
          example: "Production Primary"
        description:
          type: string
          description: Detailed description of the environment
          example: "Primary production environment in us-east-2"
        criteria:
          $ref: '#/components/schemas/EnvironmentCriteria'
        tags:
          type: array
          items:
            type: string
          description: Tags associated with the environment
          example: ["production", "primary", "critical"]
        metadata:
          type: object
          additionalProperties: true
          description: Additional metadata for the environment
          example:
            owner: "platform-team"
            cost_center: "CC-001"
            compliance: "SOC2"
        createdAt:
          type: string
          format: date-time
          description: When the environment was created
          example: "2025-07-07T16:54:43Z"
        updatedAt:
          type: string
          format: date-time
          description: When the environment was last updated
          example: "2025-07-07T16:54:43Z"
      required: [id, name, criteria]
    EnvironmentCriteria:
      type: object
      properties:
        account:
          type: string
          description: Cloud account ID
          example: "123456789012"
        region:
          type: string
          description: Cloud region
          example: "us-east-2"
        vpc:
          type: string
          description: VPC ID (optional)
          example: "vpc-12345678"
      required: [account, region]
    EnvironmentListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Environment'
        pagination:
          $ref: '#/components/schemas/Pagination'
        _links:
          $ref: '#/components/schemas/HATEOASLinks'
      required: [data, pagination, _links]
    EnvironmentInfo:
      type: object
      properties:
        id:
          type: string
          description: Environment ID
          example: "prod0"
        name:
          type: string
          description: Environment name
          example: "Production Primary"
        description:
          type: string
          description: Environment description
          example: "Primary production environment in us-east-2"
        tags:
          type: array
          items:
            type: string
          description: Environment tags
          example: ["production", "primary", "critical"]
      required: [id, name]
    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message describing the issue.
          example: Invalid filter parameter
      required: [message]
