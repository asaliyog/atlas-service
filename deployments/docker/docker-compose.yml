version: '3.8'

services:
  app:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgres://postgres:password@db:5432/golang_service?sslmode=disable
      - AZURE_TENANT_ID=${AZURE_TENANT_ID:-your-tenant-id}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID:-your-client-id}
      - JWT_SECRET=${JWT_SECRET:-your-secret-key}
      - PORT=8080
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  db:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=golang_service
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge